require 'rubygems'
require 'json'
require 'nokogiri'
require 'thread'
require 'pp'
require 'io/console'

ThreadCount = 8
STDOUT.echo = false

starting_time = Time.now

at_exit do |success|
  STDOUT.echo = true

  print "\n"
  puts Time.at(Time.now - starting_time)
           .utc
           .strftime("Running time: \033[36m%H:%M:%S\033[0m")
end

class Numeric
  def to_comma_s
    to_s.reverse
        .each_char
        .each_slice(3)
        .map(&:join)
        .join(',')
        .reverse
  end
end

def threaded_map(items, key = nil)
  items.each_slice(items.size / ThreadCount)
       .map.with_index do |item_section, thread_id|
         yield item_section, thread_id
       end
       .inject([]) do |memo, thread|
         thread.join
         if key
           memo.concat(thread[key])
         else
           memo << thread
         end
       end
end

def loading_message(message, fraction)
  print "\r#{message}: \033[36m" +
        sprintf("%5.1f", [1, fraction].min * 100) +
        "%\033[0m"
end

def start_loading_message(message)
  print message + ': ...'
end

def finish_loading_message(message)
  loading_message message, 1
  print "\n"
end

def setup_directory(name)
  Dir.mkdir(name) unless Dir.exist?(name)
end

task :init do
  setup_directory('compiled')
  setup_directory('compiled/icon')
end

task :render_icons => [:init] do
  colors = JSON.parse(File.read('style/color.json'))
  icons  = Rake::FileList.new('icon/source/**/*.svg')

  rendering = 'Rendering icons'
  deleting  = 'Deleting old icons'

  start_loading_message rendering

  edited = threaded_map(icons, 'edited') do |icon_array, thread_id|
             Thread.new do
               Thread.current['edited'] = []

               icon_array.each do |source_icon_path|
                 svg = Nokogiri::XML(File.new(source_icon_path))

                 svg.xpath('//comment()').remove

                 colors.each do |color_name, color_value|

                    # Edit each SVG to include the proper color and remove comments...

                   svg.xpath('//*[@fill] | //*[@stroke]').each do |element|
                     element['fill']   = color_value if element['fill']
                     element['stroke'] = color_value if element['stroke']
                   end

                   # Save the new SVG

                   new_file_path = 'compiled/icon/' +
                                   File.basename(source_icon_path, '.svg')
                                       .gsub(/-/, '_') +
                                   "__#{color_name}.svg"

                   if Thread.current['edited'].include?(new_file_path)
                     raise "duplicate icon at #{new_file_path}"
                   else
                     Thread.current['edited'] << new_file_path
                   end

                   if thread_id.zero?
                     loading_message(
                       rendering,
                       Thread.current['edited'].size.to_f /
                         (icon_array.size.to_f * colors.size.to_f)
                     )
                   end

                   File.open(new_file_path, 'w+') do |new_icon|
                     new_icon.write(svg.to_s)
                   end
                 end
               end
             end
           end

  finish_loading_message rendering

  puts 'Checking for old icons...'

  leftovers = Rake::FileList.new('compiled/icon/*.svg') - edited

  if leftovers.empty?
    puts 'No old icons to delete'
  else
    slice_size = 100

    start_loading_message deleting

    leftovers.each_slice(slice_size).with_index do |section, index|
      %x( rm -r #{section.join(' ')} )

      loading_message(
        deleting,
        (index.to_f * slice_size.to_f) / leftovers.size.to_f
      )
    end

    finish_loading_message deleting
  end
end
